/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    blank?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  authorName?: string;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: BlockContent;
};

export type Achievement = {
  _id: string;
  _type: "achievement";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  ranking?: string;
  iconName?: string;
  order?: number;
};

export type Sponsor = {
  _id: string;
  _type: "sponsor";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  tier?: "diamond" | "gold" | "silver" | "supporter";
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  href?: string;
  description?: string;
  order?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Category | BlockContent | Blog | Achievement | Sponsor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: TIER_SPONSORS_QUERY
// Query: *[_type == "sponsor" && tier == $tier]  | order(coalesce(order, 999), name asc) {    _id,    name,    tier,    "logoSrc": logo.asset->url,    "logoAlt": logo.alt,    href,    description,    order  }
export type TIER_SPONSORS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  tier: "diamond" | "gold" | "silver" | "supporter" | null;
  logoSrc: string | null;
  logoAlt: string | null;
  href: string | null;
  description: string | null;
  order: number | null;
}>;
// Variable: ACHIEVEMENTS_QUERY
// Query: *[_type == "achievements"] | order(order asc)[0..3] {  _id,  title,  ranking,  iconName,  order}
export type ACHIEVEMENTS_QUERYResult = Array<never>;
// Variable: BLOG_BY_SLUG_QUERY
// Query: *[_type == "blog" && slug.current == $slug][0]{    _id,    title,    slug,    excerpt,    mainImage{      asset->{        url      },      alt    },    authorName,    categories[]->{      _id,      title    },    publishedAt,    body  }
export type BLOG_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  authorName: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
  }> | null;
  publishedAt: string | null;
  body: BlockContent | null;
} | null;
// Variable: BLOGS_LIST_QUERY
// Query: *[    _type == "blog" &&    (      !defined($category) || $category == null || $category == "" ||      $category in categories[]->slug.current    )  ]  | order(publishedAt desc) [$offset...$limit]{    _id,    title,    "slug": slug.current,    excerpt,    authorName,    mainImage{asset->, alt},    publishedAt,    categories[]->{      _id,      title,      "slug": slug.current    }  }
export type BLOGS_LIST_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  excerpt: string | null;
  authorName: string | null;
  mainImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
  publishedAt: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: string | null;
  }> | null;
}>;
// Variable: BLOGS_COUNT_QUERY
// Query: count(    *[      _type == "blog" &&      (        !defined($category) || $category in categories[]->slug.current      )    ]  )
export type BLOGS_COUNT_QUERYResult = number;
// Variable: RECENT_BLOGS_QUERY
// Query: *[_type == "blog" && defined(publishedAt) && publishedAt <= now()]  | order(publishedAt desc)[0...2]{    _id,    title,    "slug": slug.current,    authorName,    mainImage{ asset->, alt },    publishedAt  }
export type RECENT_BLOGS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  authorName: string | null;
  mainImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
  publishedAt: string | null;
}>;
// Variable: CATEGORY_QUERY
// Query: *[_type == "category"] | order(title asc) {  _id,  title,  "slug": slug.current}
export type CATEGORY_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"sponsor\" && tier == $tier]\n  | order(coalesce(order, 999), name asc) {\n    _id,\n    name,\n    tier,\n    \"logoSrc\": logo.asset->url,\n    \"logoAlt\": logo.alt,\n    href,\n    description,\n    order\n  }\n": TIER_SPONSORS_QUERYResult;
    "\n*[_type == \"achievements\"] | order(order asc)[0..3] {\n  _id,\n  title,\n  ranking,\n  iconName,\n  order\n}\n": ACHIEVEMENTS_QUERYResult;
    "\n  *[_type == \"blog\" && slug.current == $slug][0]{\n    _id,\n    title,\n    slug,\n    excerpt,\n    mainImage{\n      asset->{\n        url\n      },\n      alt\n    },\n    authorName,\n    categories[]->{\n      _id,\n      title\n    },\n    publishedAt,\n    body\n  }\n": BLOG_BY_SLUG_QUERYResult;
    "\n  *[\n    _type == \"blog\" &&\n    (\n      !defined($category) || $category == null || $category == \"\" ||\n      $category in categories[]->slug.current\n    )\n  ]\n  | order(publishedAt desc) [$offset...$limit]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    excerpt,\n    authorName,\n    mainImage{asset->, alt},\n    publishedAt,\n    categories[]->{\n      _id,\n      title,\n      \"slug\": slug.current\n    }\n  }\n": BLOGS_LIST_QUERYResult;
    "\n  count(\n    *[\n      _type == \"blog\" &&\n      (\n        !defined($category) || $category in categories[]->slug.current\n      )\n    ]\n  )\n": BLOGS_COUNT_QUERYResult;
    "\n  *[_type == \"blog\" && defined(publishedAt) && publishedAt <= now()]\n  | order(publishedAt desc)[0...2]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    authorName,\n    mainImage{ asset->, alt },\n    publishedAt\n  }\n": RECENT_BLOGS_QUERYResult;
    "*[_type == \"category\"] | order(title asc) {\n  _id,\n  title,\n  \"slug\": slug.current\n}": CATEGORY_QUERYResult;
  }
}
